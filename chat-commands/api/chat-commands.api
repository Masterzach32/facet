public final class io/facet/chatcommands/ArgumentBuilderKt {
	public static final fun executesSuspend (Lcom/mojang/brigadier/builder/ArgumentBuilder;Lkotlin/jvm/functions/Function2;)Lcom/mojang/brigadier/builder/ArgumentBuilder;
	public static final fun requiresSuspend (Lcom/mojang/brigadier/builder/ArgumentBuilder;Lkotlin/jvm/functions/Function2;)Lcom/mojang/brigadier/builder/ArgumentBuilder;
}

public abstract class io/facet/chatcommands/ChatCommand {
	public fun <init> (Ljava/lang/String;Ljava/util/Set;Lio/facet/chatcommands/Scope;Ljava/lang/String;Ljava/lang/String;Ldiscord4j/rest/util/PermissionSet;Lio/facet/chatcommands/CommandUsage;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/util/Set;Lio/facet/chatcommands/Scope;Ljava/lang/String;Ljava/lang/String;Ldiscord4j/rest/util/PermissionSet;Lio/facet/chatcommands/CommandUsage;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getAliases ()Ljava/util/Set;
	public final fun getCategory ()Ljava/lang/String;
	public final fun getDescription ()Ljava/lang/String;
	public final fun getDiscordPermsRequired ()Ldiscord4j/rest/util/PermissionSet;
	public final fun getName ()Ljava/lang/String;
	public final fun getScope ()Lio/facet/chatcommands/Scope;
	public final fun getUsage ()Lio/facet/chatcommands/CommandUsage;
	public final fun register (Lcom/mojang/brigadier/CommandDispatcher;)V
	protected abstract fun register (Lio/facet/chatcommands/DSLCommandNode;)V
}

public final class io/facet/chatcommands/ChatCommandSource : kotlinx/coroutines/CoroutineScope {
	public fun <init> (Ldiscord4j/core/event/domain/message/MessageCreateEvent;Ljava/lang/String;Ljava/lang/String;Lkotlinx/coroutines/CoroutineScope;)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getChannel (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getClient ()Ldiscord4j/core/GatewayDiscordClient;
	public final fun getCommand ()Ljava/lang/String;
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public final fun getEvent ()Ldiscord4j/core/event/domain/message/MessageCreateEvent;
	public final fun getGuild (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getGuildChannel (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getGuildId ()Ldiscord4j/common/util/Snowflake;
	public final fun getMember ()Ldiscord4j/core/object/entity/Member;
	public final fun getMessage ()Ldiscord4j/core/object/entity/Message;
	public final fun getPrefixUsed ()Ljava/lang/String;
	public final fun getUser ()Ldiscord4j/core/object/entity/User;
	public fun hashCode ()I
}

public final class io/facet/chatcommands/ChatCommandSourceKt {
	public static final fun respondEmbed (Lio/facet/chatcommands/ChatCommandSource;Ldiscord4j/core/spec/EmbedCreateSpec;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun respondEmbed (Lio/facet/chatcommands/ChatCommandSource;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun respondMessage (Lio/facet/chatcommands/ChatCommandSource;Ldiscord4j/core/spec/MessageCreateSpec;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun respondMessage (Lio/facet/chatcommands/ChatCommandSource;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun respondMessage (Lio/facet/chatcommands/ChatCommandSource;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun respondMessage (Lio/facet/chatcommands/ChatCommandSource;[Ldiscord4j/core/spec/EmbedCreateSpec;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/CommandContextKt {
	public static final fun getAliasUsed (Lcom/mojang/brigadier/context/CommandContext;)Ljava/lang/String;
	public static final fun getBool (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Z
	public static final fun getChannels (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lio/facet/chatcommands/arguments/TextChannelSelector;
	public static final fun getDouble (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)D
	public static final fun getFloat (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)F
	public static final fun getInt (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)I
	public static final fun getLong (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)J
	public static final fun getMembers (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lio/facet/chatcommands/arguments/MemberSelector;
	public static final fun getRoles (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Lio/facet/chatcommands/arguments/RoleSelector;
	public static final fun getSnowflake (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ldiscord4j/common/util/Snowflake;
	public static final fun getString (Lcom/mojang/brigadier/context/CommandContext;Ljava/lang/String;)Ljava/lang/String;
}

public final class io/facet/chatcommands/CommandDispatcherKt {
	public static final fun executeSuspend (Lcom/mojang/brigadier/CommandDispatcher;Lcom/mojang/brigadier/ParseResults;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun literal (Lcom/mojang/brigadier/CommandDispatcher;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lcom/mojang/brigadier/tree/CommandNode;
}

public final class io/facet/chatcommands/CommandUsage : java/lang/Iterable, kotlin/jvm/internal/markers/KMappedMarker {
	public fun <init> (Ljava/util/Map;)V
	public fun iterator ()Ljava/util/Iterator;
}

public final class io/facet/chatcommands/CommandUsage$Pair {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/String;
	public final fun copy (Ljava/lang/String;Ljava/lang/String;)Lio/facet/chatcommands/CommandUsage$Pair;
	public static synthetic fun copy$default (Lio/facet/chatcommands/CommandUsage$Pair;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lio/facet/chatcommands/CommandUsage$Pair;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescription ()Ljava/lang/String;
	public final fun getExample ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class io/facet/chatcommands/CommandUsageBuilder {
	public fun <init> ()V
	public final fun add (Ljava/lang/String;Ljava/lang/String;)V
	public final fun default (Ljava/lang/String;)V
}

public final class io/facet/chatcommands/CommandUsageKt {
	public static final fun commandUsage (Lkotlin/jvm/functions/Function1;)Lio/facet/chatcommands/CommandUsage;
}

public abstract interface class io/facet/chatcommands/DSLCommandNode {
	public abstract fun alias (Ljava/lang/String;)V
	public abstract fun argument (Ljava/lang/String;Lcom/mojang/brigadier/arguments/ArgumentType;Lkotlin/jvm/functions/Function1;)V
	public abstract fun executes (Lkotlin/jvm/functions/Function3;)V
	public abstract fun getBuilder ()Lcom/mojang/brigadier/builder/ArgumentBuilder;
	public abstract fun getNode ()Lcom/mojang/brigadier/tree/CommandNode;
	public abstract fun literal (Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
	public abstract fun require (Lkotlin/jvm/functions/Function2;)V
	public abstract fun suggest (Lkotlin/jvm/functions/Function2;)V
}

public final class io/facet/chatcommands/DSLCommandNodeKt {
	public static final fun runs (Lio/facet/chatcommands/DSLCommandNode;Lkotlin/jvm/functions/Function3;)V
}

public final class io/facet/chatcommands/Scope : java/lang/Enum {
	public static final field ALL Lio/facet/chatcommands/Scope;
	public static final field GUILD Lio/facet/chatcommands/Scope;
	public static final field PRIVATE Lio/facet/chatcommands/Scope;
	public static fun valueOf (Ljava/lang/String;)Lio/facet/chatcommands/Scope;
	public static fun values ()[Lio/facet/chatcommands/Scope;
}

public final class io/facet/chatcommands/SuggestionsBuilderKt {
	public static final fun plus (Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;I)Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;
	public static final fun plus (Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;Ljava/lang/String;)Lcom/mojang/brigadier/suggestion/SuggestionsBuilder;
}

public abstract interface class io/facet/chatcommands/SuspendCommand : com/mojang/brigadier/Command {
	public abstract fun run (Lcom/mojang/brigadier/context/CommandContext;)I
	public abstract fun runSuspend (Lcom/mojang/brigadier/context/CommandContext;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/SuspendCommand$DefaultImpls {
	public static fun run (Lio/facet/chatcommands/SuspendCommand;Lcom/mojang/brigadier/context/CommandContext;)I
}

public final class io/facet/chatcommands/arguments/ArgumentsKt {
	public static final fun member ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun members ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun membersStrict ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun role ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun roles ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun snowflake ()Lcom/mojang/brigadier/arguments/ArgumentType;
	public static final fun textChannel ()Lcom/mojang/brigadier/arguments/ArgumentType;
}

public abstract class io/facet/chatcommands/arguments/EntitySelector {
	public fun <init> ()V
	public abstract fun get (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	protected final fun getEntities ()Ljava/util/List;
	public abstract fun getMultiple (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/GuildEntityArgument : com/mojang/brigadier/arguments/ArgumentType {
	public fun getExamples ()Ljava/util/Collection;
	public fun parse (Lcom/mojang/brigadier/StringReader;)Lio/facet/chatcommands/arguments/EntitySelector;
	public synthetic fun parse (Lcom/mojang/brigadier/StringReader;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/MemberSelector : io/facet/chatcommands/arguments/EntitySelector {
	public fun <init> (ZZ)V
	public fun get (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getMultiple (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/MessageSelector : io/facet/chatcommands/arguments/EntitySelector {
	public fun <init> ()V
	public fun get (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getMultiple (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/RoleSelector : io/facet/chatcommands/arguments/EntitySelector {
	public fun <init> (Z)V
	public fun get (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getMultiple (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/SnowflakeArgument : com/mojang/brigadier/arguments/ArgumentType {
	public static final field INSTANCE Lio/facet/chatcommands/arguments/SnowflakeArgument;
	public fun parse (Lcom/mojang/brigadier/StringReader;)Ldiscord4j/common/util/Snowflake;
	public synthetic fun parse (Lcom/mojang/brigadier/StringReader;)Ljava/lang/Object;
}

public final class io/facet/chatcommands/arguments/TextChannelSelector : io/facet/chatcommands/arguments/EntitySelector {
	public fun <init> ()V
	public fun get (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getMultiple (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/common/util/Snowflake;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class io/facet/chatcommands/events/CommandEvent : discord4j/core/event/domain/Event {
	public fun <init> (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/gateway/ShardInfo;Lio/facet/chatcommands/ChatCommand;Lio/facet/chatcommands/ChatCommandSource;)V
	public final fun getCommand ()Lio/facet/chatcommands/ChatCommand;
	public final fun getSource ()Lio/facet/chatcommands/ChatCommandSource;
}

public final class io/facet/chatcommands/events/CommandExecutedEvent : io/facet/chatcommands/events/CommandEvent {
	public fun <init> (Ldiscord4j/core/GatewayDiscordClient;Ldiscord4j/gateway/ShardInfo;Lio/facet/chatcommands/ChatCommand;Lio/facet/chatcommands/ChatCommandSource;Ljava/lang/String;)V
	public final fun getAliasUsed ()Ljava/lang/String;
}

